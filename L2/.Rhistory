ann_text <- data.frame(Time = 10, X = 80, Model = 'Stochastic SI Model')
ggplot(sim_out, aes(x=Time, y=X, colour=Repetition)) +
geom_line(aes(group = Repetition)) +
facet_wrap( ~ Model, ncol=2) +
geom_text(data = ann_text, label='Ends when out\nof susceptibles', colour = 'black')
?ssa
ann_text <- data.frame(Time = 10, X = 80, Model = 'Stochastic SI Model')
ggplot(sim_out, aes(x=Time, y=X, colour=Repetition)) +
geom_line(aes(group = Repetition)) +
facet_wrap( ~ Model, ncol=2) +
geom_text(data = ann_text, label='Ends when negative number\nof susceptibles', colour = 'black')
rm(list=ls(all=TRUE))
sim_out <- data.frame(Repetition = numeric(), Sample = numeric(), Time = numeric(), X = numeric(), Model = character())
for (i in 1:100){
parms <- c(c1 = 1, c2 = 0.1, r=0.1)
init <- c(X = 1, S=99, I = 1)
## Deterministic Logistic & SI model, looping over these for the sake of the questions
deriv <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
dS <-   - r * I * S
dI <-     r * I * S
return(list(c(dX, dS, dI)))
})
}
#init <- c(X = 1, S=99, I = 1)
#parameters <- c(c1=1, c2=0.1, r=0.1)
times <- seq(0, 20, by = 0.01)
out <- as.data.frame(ode(y = init, times = times,
func = deriv, parms = parms))
Repetition <- rep(i,nrow(out))
Sample <- 1:nrow(out)
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = times, X = out$X, Model = rep('Deterministic Logistic Model',nrow(out))))
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = times, X = out$I,  Model = rep('Deterministic SI Model',nrow(out))))
## Stochastic Logistic & SI model
#parms <- c(c1 = 1, c2 = 0.1, r=0.1)
#x0 <- c(X = 1, S=99, I=1 )
a <- c("c1 * X", "c2 * X * X", "r*S*I")
nu <- matrix(c(+1, -1, 0, 0, 0, -1, 0, 0, +1), nrow=3, byrow=T)
out <- ssa(init, a , nu, parms,
tf=20,
tau = 0.01,
method="ETL", #"Explicit tau-leap" => user-defined step size
maxWallTime=5,
ignoreNegativeState = T) #Gives warning instead of error for negative number of susceptibles. Still stops when out of susceptibles.
Repetition <- rep(i,nrow(out$data))
Sample <- 1:nrow(out$data)
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = out$data[,1], X = out$data[,2], Model = rep('Stochastic Logistic Model',nrow(out$data))))
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = out$data[,1], X = out$data[,4], Model = rep('Stochastic SI Model',nrow(out$data))))
}
within_summary <- ddply(sim_out, .(Model, Repetition), summarise, X_end = tail(X, n=1), Time_end = tail(Time, n=1), X_max = max(X), X_min = min(X), X_mean = mean(X), X_sd = sd(X))
##-----------------------------
## Plot results
##-----------------------------
ggplot(sim_out, aes(x=Time, y=X, colour=Repetition)) +
geom_line(aes(group = Repetition)) +
facet_wrap( ~ Model, ncol=2)
ggplot(sim_out, aes(x=Time, y=X, colour=Repetition)) +
geom_line(aes(group = Repetition)) +
facet_wrap( ~ Model, ncol=2)
rm(list=ls(all=TRUE))
sim_out <- data.frame(Repetition = numeric(), Sample = numeric(), Time = numeric(), X = numeric(), Model = character())
## Defining constants
parms <- c(c1 = 1, c2 = 0.1, r=0.1)
init <- c(X = 1, S=99, I = 1)
## Deterministic Logistic & SI model
deriv <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
dS <-   - r * I * S
dI <-     r * I * S
return(list(c(dX, dS, dI)))
})
}
times <- seq(0, 20, by = 0.01)
out <- as.data.frame(ode(y = init, times = times,
func = deriv, parms = parms))
Repetition <- rep(1,nrow(out))
Sample <- 1:nrow(out)
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = times, X = out$X, Model = rep('Deterministic Logistic Model',nrow(out))))
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = times, X = out$I,  Model = rep('Deterministic SI Model',nrow(out))))
for (i in 1:100){
## Stochastic Logistic & SI model
a <- c("c1 * X", "c2 * X * X", "r*S*I")
nu <- matrix(c(+1, -1, 0, 0, 0, -1, 0, 0, +1), nrow=3, byrow=T)
out <- ssa(init, a , nu, parms,
tf=20,
tau = 0.01,
method="ETL", #"Explicit tau-leap" => user-defined step size
maxWallTime=5,
ignoreNegativeState = T) #Gives warning instead of error for negative number of susceptibles. Still stops when out of susceptibles.
Repetition <- rep(i,nrow(out$data))
Sample <- 1:nrow(out$data)
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = out$data[,1], X = out$data[,2], Model = rep('Stochastic Logistic Model',nrow(out$data))))
sim_out <- rbind(sim_out, data.frame(Repetition, Sample, Time = out$data[,1], X = out$data[,4], Model = rep('Stochastic SI Model',nrow(out$data))))
}
within_summary <- ddply(sim_out, .(Model, Repetition), summarise, X_end = tail(X, n=1), Time_end = tail(Time, n=1), X_max = max(X), X_min = min(X), X_mean = mean(X), X_sd = sd(X))
##-----------------------------
## Plot results
##-----------------------------
ggplot(sim_out, aes(x=Time, y=X, colour=Repetition)) +
geom_line(aes(group = Repetition)) +
facet_wrap( ~ Model, ncol=2)
mean_sd <- ddply(within_summary,.(Model), summarise, mean=mean(X_end, na.rm = TRUE), sd=sd(X_end, na.rm = TRUE))
ggplot(data = within_summary, aes(x=Repetition, y=X_end))  + geom_point() +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
facet_wrap( ~ Model, ncol=2) +
ggtitle('X(end), Mean & 95% CI') +
ylab("X(end)")
mean_sd <- ddply(within_summary,.(Model), summarise, mean=mean(X_end, na.rm = TRUE), sd=sd(X_end, na.rm = TRUE))
ggplot(data = within_summary, aes(x=Repetition, y=X_end))  + geom_point() +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
facet_wrap( ~ Model, ncol=2) +
ggtitle('X(end), Mean & 95% CI') +
ylab("X(end)")
mean_sd <- ddply(within_summary,.(Model), summarise, mean=mean(X_end, na.rm = TRUE), sd=sd(X_end, na.rm = TRUE))
ggplot(data = within_summary, aes(x=Repetition, y=X_end))  + geom_point() +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000", na.rm = TRUE) +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
facet_wrap( ~ Model, ncol=2) +
ggtitle('X(end), Mean & 95% CI') +
ylab("X(end)")
mean_sd <- ddply(within_summary,.(Model), summarise, mean=mean(X_end, na.rm = TRUE), sd=sd(X_end, na.rm = TRUE))
ggplot(data = within_summary, aes(x=Repetition, y=X_end))  + geom_point() +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3, na.rm = TRUE),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
facet_wrap( ~ Model, ncol=2) +
ggtitle('X(end), Mean & 95% CI') +
ylab("X(end)")
mean_sd <- ddply(within_summary,.(Model), summarise, mean=mean(X_end, na.rm = TRUE), sd=sd(X_end, na.rm = TRUE))
ggplot(data = within_summary, aes(x=Repetition, y=X_end))  + geom_point() +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000", na.rm = TRUE) +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
facet_wrap( ~ Model, ncol=2) +
ggtitle('X(end), Mean & 95% CI') +
ylab("X(end)")
mean_sd <- ddply(within_summary,.(Model), summarise, mean=mean(X_end, na.rm = TRUE), sd=sd(X_end, na.rm = TRUE))
ggplot(data = within_summary, aes(x=Repetition, y=X_end))  + geom_point() +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
facet_wrap( ~ Model, ncol=2) +
ggtitle('X(end), Mean & 95% CI') +
ylab("X(end)")
End_summary <-ddply(within_summary, .(Model), summarise, Av_end_X = mean(X_end),
CI_low =mean(X_end) - 1.9604 * sd(X_end), CI_high =mean(X_end) + 1.9604 * sd(X_end) )
print('Last sample summary:')
print(End_summary)
# Percent Extinction summary
PercentExtinct <-ddply(within_summary, .(Model), summarise,
PercentExtinct = length(X_end[X_end<0.5]) / length(X_end) * 100 )
print(PercentExtinct)
No_ext_End_summary <-ddply(within_summary[within_summary$X_end>0.5,], .(Model), summarise,
Av_end_X = mean(X_end), CI_low =mean(X_end) - 1.9604 * sd(X_end), CI_high =mean(X_end) + 1.9604 * sd(X_end) )
print('Last sample summary, without extinction:')
print(No_ext_End_summary)
ggplot(sim_out, aes(x=Time, y=X, colour=Repetition)) +
geom_line(aes(group = Repetition)) +
facet_wrap( ~ Model, ncol=2)
rm(list=ls(all=TRUE))
sim_out <- data.frame(Repetition = numeric(), Sample = numeric(), Time = double(), X = double())
parms <- c(c1 = 1, c2 = 0.01)
x0 <- c(X=100)
a <- c("c1 * X", "c2 * X * X")
nu <- matrix(c(+1,-1),ncol=2)
for (i in c(1:1000)){
out <- ssa(x0, a , nu, parms,
tf=100,
tau = 1,
method="ETL", #"Explicit tau-leap" => user-defined step size
maxWallTime=5)
colnames(out$data)[1] <- 'Time'
Repetition <- rep(i,nrow(out$data))
Sample <- 1:nrow(out$data)
sim_out <- rbind(sim_out,cbind(Repetition,Sample,out$data))
}
within_summary <- ddply(sim_out, .(Repetition), summarise, X_end = tail(X, n=1), X_max = max(X))
ggplot(data = sim_out, aes(x=Time, y=X, colour=Repetition)) + geom_line(aes(group = Repetition))
median_quantiles <- quantile(within_summary$X_end, c(.025, .975))
within_summary$Percentile <- 'middle'
within_summary$Percentile[within_summary$X_end < median_quantiles['2.5%']] <- '<2.5%'
within_summary$Percentile[within_summary$X_end > median_quantiles['97.5%']] <- '>97.5%'
mean_sd <- data.frame(mean=mean(within_summary$X_end), sd=sd(within_summary$X_end))
ggplot(data = within_summary, aes(x=Repetition, y=X_end, colour = Percentile))  + geom_point(aes(group = Percentile)) +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
ggtitle('X(100), Mean & 95% CI') +
ylab("X(100)")
median_quantiles <- quantile(within_summary$X_end, c(.025, .975))
within_summary$Percentile <- '>=2.5% & <=97.5%'
within_summary$Percentile[within_summary$X_end < median_quantiles['2.5%']] <- '<2.5%'
within_summary$Percentile[within_summary$X_end > median_quantiles['97.5%']] <- '>97.5%'
mean_sd <- data.frame(mean=mean(within_summary$X_end), sd=sd(within_summary$X_end))
ggplot(data = within_summary, aes(x=Repetition, y=X_end, colour = Percentile))  + geom_point(aes(group = Percentile)) +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
ggtitle('X(100), Mean & 95% CI') +
ylab("X(100)")
print(paste('Mean:', round(mean_sd$mean),'  95% CI[', round(mean_sd$mean - mean_sd$sd * 1.9604), ',' , round(mean_sd$mean + mean_sd$sd * 1.9604),']'))
print('Percentiles:')
print(median_quantiles)
print(paste('Max[X(100)]:', max(within_summary$X_end)))
print(paste('Max[Highest_X]:', max(within_summary$X_max)))
install.packages("knitr")
install.packages("markdown")
system("pandoc -s knitr_test.html -o knitr_test.pdf")
source('~/workspace/MEB/knitr_test/Build_Report.R')
source('~/workspace/MEB/knitr_test/Build_Report.R')
source('~/workspace/MEB/knitr_test/Build_Report.R')
source('~/workspace/MEB/knitr_test/Build_Report.R')
source('~/workspace/MEB/knitr_test/Build_Report.R')
paste(fname,'.html')
fname <- 'knitr_test'
paste(fname,'.md')
source('~/workspace/MEB/knitr_test/Build_Report.R')
paste(fname,'.md',sep="")
paste(fname,'.html',sep="")
source('~/workspace/MEB/knitr_test/Build_Report.R')
source('~/workspace/MEB/knitr_test/Build_Report.R')
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
mean_sd <- ddply(within_summary,.(Model), summarise, mean=mean(X_end, na.rm = TRUE), sd=sd(X_end, na.rm = TRUE))
ggplot(data = within_summary, aes(x=Repetition, y=X_end))  + geom_point() +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
facet_wrap( ~ Model, ncol=2) +
ggtitle('X(end), Mean & 95% CI') +
ylab("X(end)")
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
layout(matrix(c(1,2), 1, 2, byrow = TRUE))
4
4;
4,
unif <- runif(n = 10000, min = 5, max = 15)
plot(unif, ylim = c(0,20), pch='.') + abline(h = mean(unif), col = 2, lwd = 3)
plot(unif, ylim = c(0,20), pch='.') + abline(h = mean(unif), col = 2, lwd = 3);
rbinom(1, 5, 0.2)
tmp <- .Random.seed
tmp
seed
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
for (seed_n in c(1,2)){
set.seed(seed_n)
deriv <- function(Time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
init <- c(X = rbinom(1, 5, 0.2))
times <- seq(0, 20, by =0.01)
parameters <- c(c1 = 1, c2 = 0.01)
out <- as.data.frame(ode(y = init, times = times,
func = deriv, parms = parameters))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Initial Value Stochasticity', lty = 1, lwd =1, col = 2)
}
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
for (seed_n in c(1,3)){
set.seed(seed_n)
deriv <- function(Time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
init <- c(X = rbinom(1, 5, 0.2))
times <- seq(0, 20, by =0.01)
parameters <- c(c1 = 1, c2 = 0.01)
out <- as.data.frame(ode(y = init, times = times,
func = deriv, parms = parameters))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Initial Value Stochasticity', lty = 1, lwd =1, col = 2)
}
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
for (seed_n in c(1,1000)){
set.seed(seed_n)
deriv <- function(Time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
init <- c(X = rbinom(1, 5, 0.2))
times <- seq(0, 20, by =0.01)
parameters <- c(c1 = 1, c2 = 0.01)
out <- as.data.frame(ode(y = init, times = times,
func = deriv, parms = parameters))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Initial Value Stochasticity', lty = 1, lwd =1, col = 2)
}
```
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
for (seed_n in c(1,1000)){
set.seed(seed_n)
deriv <- function(Time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
init <- c(X = rbinom(1, 5, 0.2))
times <- seq(0, 20, by =0.01)
parameters <- c(c1 = 1, c2 = 0.01)
out <- as.data.frame(ode(y = init, times = times,
func = deriv, parms = parameters))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Initial Value Stochasticity', lty = 1, lwd =1, col = 2)
}
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
for (seed_n in c(1,1000)){
set.seed(seed_n)
deriv <- function(Time, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
init <- c(X = rbinom(1, 5, 0.2))
times <- seq(0, 20, by =0.01)
parameters <- c(c1 = 1, c2 = 0.01)
out <- as.data.frame(ode(y = init, times = times,
func = deriv, parms = parameters))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Initial Value Stochasticity', lty = 1, lwd =1, col = 2)
}
median_quantiles
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
paste(fname,'.html',sep="")
fname <- 'L2'
paste(fname,'.html',sep="")
# Set working directory
script.dir <- dirname(sys.frame(1)$ofile)
setwd(script.dir)
# Load packages
require(knitr)
require(markdown)
script.dir
script.dir <- dirname(sys.frame(1)$ofile)
script.dir
irname(sys.frame(1)$ofile)
dirname(sys.frame(1)$ofile)
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
script.basename
script.basename
initial.options <- commandArgs(trailingOnly = FALSE)
file.arg.name <- "--file="
script.name <- sub(file.arg.name, "", initial.options[grep(file.arg.name, initial.options)])
script.basename <- dirname(script.name)
script.basename
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
source('~/workspace/MEB/Modeling_in_Epidemilogy/L2/Build_Report.R')
rm(list=ls(all=TRUE))
par(mar = c(4, 4, 1, 0.1), mgp = c(2, 1, 0))
sim_out <- data.frame(Repetition = numeric(), Sample = numeric(), Time = double(), X = double())
parms <- c(c1 = 1, c2 = 0.01)
x0 <- c(X=100)
a <- c("c1 * X", "c2 * X * X")
nu <- matrix(c(+1,-1),ncol=2)
for (i in c(1:100)){
#"Explicit tau-leap" => user-defined step size
out <- ssa(x0, a , nu, parms,
tf=100,
tau = 1,
method="ETL",
maxWallTime=5)
colnames(out$data)[1] <- 'Time'
Repetition <- rep(i,nrow(out$data))
Sample <- 1:nrow(out$data)
sim_out <- rbind(sim_out,cbind(Repetition,Sample,out$data))
}
within_summary <- ddply(sim_out, .(Repetition), summarise, X_end = tail(X, n=1), X_max = max(X))
## Plot results
ggplot(data = sim_out, aes(x=Time, y=X, colour=Repetition)) + geom_line(aes(group = Repetition))
median_quantiles <- quantile(within_summary$X_end, c(.025, 0.50, .975))
within_summary$Percentile <- 'middle'
within_summary$Percentile[within_summary$X_end < median_quantiles['2.5%']] <- '<2.5%'
within_summary$Percentile[within_summary$X_end > median_quantiles['97.5%']] <- '>97.5%'
mean_sd <- data.frame(mean=mean(within_summary$X_end), sd=sd(within_summary$X_end))
ggplot(data = within_summary, aes(x=Repetition, y=X_end, colour = Percentile))  +
geom_point(aes(group = Percentile)) + ggtitle('X(100), Mean & 95% CI') +
geom_hline(data=mean_sd,aes(yintercept=mean,3),linetype=1, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean+1.9604*sd,3),linetype=2, colour="#990000") +
geom_hline(data=mean_sd,aes(yintercept=mean-1.9604*sd,3),linetype=2, colour="#990000") +
ylab("X(100)")
system("pandoc -s L2.html -o L2.pdf")
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
init <- c(X = 1)
parms <- c(c1 = 1, c2 = 0.01)
deriv <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
times <- seq(0, 20, by = 0.01)
out <- as.data.frame(ode(y = init, times = times, func = deriv, parms = parms))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Deterministic Logistic Model', lty = 1, lwd =1, col = 2)
#Testing Gillespie with "Explicit tau-leap" => user-defined step size
a <- c("c1 * X", "c2 * X * X")
nu <- matrix(c(+1,-1),ncol=2)
out <- ssa(init, a , nu, parms,
tf=20,
tau = 0.01,
method="ETL",
maxWallTime=5,
simName='Stochastic Logistic Model',
verbose = T)
ssa.plot(out,show.legend=F)
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
init <- c(X = 1)
parms <- c(c1 = 1, c2 = 0.01)
deriv <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
times <- seq(0, 20, by = 0.01)
out <- as.data.frame(ode(y = init, times = times, func = deriv, parms = parms))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Deterministic Logistic Model', lty = 1, lwd =1, col = 2)
#Testing Gillespie with "Explicit tau-leap" => user-defined step size
a <- c("c1 * X", "c2 * X * X")
nu <- matrix(c(+1,-1),ncol=2)
out <- ssa(init, a , nu, parms,
tf=20,
tau = 0.01,
method="ETL",
maxWallTime=5,
simName='Stochastic Logistic Model')
ssa.plot(out,show.legend=F)
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
init <- c(X = 1)
parms <- c(c1 = 1, c2 = 0.01)
deriv <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
times <- seq(0, 20, by = 0.01)
out <- as.data.frame(ode(y = init, times = times, func = deriv, parms = parms))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Deterministic Logistic Model', lty = 1, lwd =1, col = 2)
#Testing Gillespie with "Explicit tau-leap" => user-defined step size
a <- c("c1 * X", "c2 * X * X")
nu <- matrix(c(+1,-1),ncol=2)
out <- ssa(init, a , nu, parms,
tf=20,
tau = 0.01,
method="ETL",
maxWallTime=5,
simName='Stochastic Logistic Model')
ssa.plot(out,show.legend=F)
rm(list=ls(all=TRUE))
layout(matrix(1:2, 1, 2))
init <- c(X = 1)
parms <- c(c1 = 1, c2 = 0.01)
deriv <- function(times, state, parameters) {
with(as.list(c(state, parameters)), {
dX <- c1 * X - c2 * X * X
return(list(c(dX)))
})
}
times <- seq(0, 20, by = 0.01)
out <- as.data.frame(ode(y = init, times = times, func = deriv, parms = parms))
out$time <- NULL
matplot(times, out , type = 'l', xlab = 'Time', ylab = 'AU', ylim = c(0, 120),
main = 'Deterministic Logistic Model', lty = 1, lwd =1, col = 2)
#Gillespie with "Explicit tau-leap" => user-defined step size
a <- c("c1 * X", "c2 * X * X")
nu <- matrix(c(+1,-1),ncol=2)
out <- ssa(init, a , nu, parms,
tf=20,
tau = 0.01,
method="ETL",
maxWallTime=5,
simName='Stochastic Logistic Model')
ssa.plot(out,show.legend=F)
